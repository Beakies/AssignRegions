
# Script to assign region code to each sighting location and view all sighting locations on map

# J. Stanistreet 2022-12-07

#####################################################

### REQUIRED FOLDERS:

# input: formatted Excel sheet with sighting coordinates to check/assign to regions

# output: resulting .csv file with region codes

# shapefiles: folder containing the following shapefiles:

#   DFO Regions: these are based on Federal Marine Bioregions, edited to remove overlap with land,
#       snap edges together, and combine multiple polygons into a single shapefile per region
#   
#   ne_countries_10: land area shapefile, sourced using rnaturalearth library and the following code:
#
#       land<-ne_countries(scale = 10, type = "countries", returnclass = "sf") %>% 
#       st_transform(4326)
#       st_write(land, "ne_countries_10.shp")


### Region codes applied by this script:

#MAR    DFO-Maritimes
#QC     DFO-Quebec
#NL     DFO-Newfoundland
#GULF   DFO-Gulf
#O&P    DFO-Ontario and Prairie
#AR     DFO-Arctic
#PAC    DFO-Pacific
#INT    International (anywhere outside DFO regions)
#land   Location appears to be on land - check for errors in coordinates


#####################################################

### TO RUN SCRIPT, MODIFY THESE LINES:

# specify input file
input_file <-"TestData.xlsx"

# install pacman package - only necessary the first time code is run, otherwise comment out this line
install.packages("pacman")

# run all code below!


######## PART 1: assign region ########

# use pacman to install and load required packages

library(pacman)
pacman::p_load(sf, tidyverse, readxl, here, leaflet, htmlwidgets)

# load DFO Region shapefiles

AR<-read_sf(here("shapefiles", "AR.shp")) %>% 
  transmute(DFO_REGION = "AR", geometry)

GULF<-read_sf(here("shapefiles", "GULF.shp")) %>% 
  transmute(DFO_REGION = "GULF", geometry)

MAR<-read_sf(here("shapefiles", "MAR.shp")) %>% 
  transmute(DFO_REGION = "MAR", geometry)

NFLD<-read_sf(here("shapefiles", "NFLD.shp")) %>% 
  transmute(DFO_REGION = "NFLD", geometry)

OandP<-read_sf(here("shapefiles", "O&P.shp")) %>% 
  transmute(DFO_REGION = "O&P", geometry)

PAC<-read_sf(here("shapefiles", "PAC.shp")) %>% 
  transmute(DFO_REGION = "PAC", geometry)

QC<-read_sf(here("shapefiles", "QC.shp")) %>% 
  transmute(DFO_REGION = "QC", geometry)

# load countries (sourced from rnaturalearth, saved as shapefile)

land<-read_sf(here("shapefiles", "ne_countries_10.shp")) %>% 
  st_transform(4326) %>% 
  transmute(DFO_REGION = "land", geometry)

# combine regions and land areas into one sf
regions<-sf:::rbind.sf(AR, GULF, MAR, NFLD, OandP, PAC, QC, land)

# load input WS data
WS_data <- read_excel(here("input", input_file), sheet = "val_entry")

WS_coords <- WS_data %>%
  select(LONGITUDE, LATITUDE) %>% 
  mutate(ROWNUMBER = row_number()) %>% 
  relocate(ROWNUMBER, LATITUDE, LONGITUDE)

# create shapefile of sighting coordinates
points_sf <- st_as_sf(WS_coords, coords = c("LONGITUDE", "LATITUDE"), crs = st_crs(regions))

# intersect sighting coordinates with region polygons
sf_use_s2(FALSE)

wspoints <- points_sf %>% 
  mutate(
    intersection = as.integer(st_intersects(geometry, regions)),
    wspoint_region = if_else(is.na(intersection), 'INT', regions$DFO_REGION[intersection])
  ) 

WS_coords$REGION_CD <-as_factor(wspoints$wspoint_region)

# output as .csv file
outfilename<-str_match(input_file, "(.*)\\..*$")[,2]
write_csv(WS_coords, here("output", paste0(outfilename, "-REGIONCODES.csv.")))

######## PART 2: generate map to check results ########

# set up regions for map

region_labels<-c("AR","GULF", "MAR", "NFLD", "O&P", "PAC", "QC", "land", "INT")

mapregions<-regions %>% 
  mutate(dfo_region = fct_expand(as_factor(DFO_REGION), region_labels))

# set up color palettes for map

colorpal<-c("#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#ffff33","#666666", "grey60")
colorpal2<-c("#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#ffff33","black", "white")
names(colorpal) <-region_labels
names(colorpal2) <-region_labels
regioncolors<-colorFactor(colorpal, mapregions$dfo_region)
regioncolors_points<-colorFactor(colorpal2, mapregions$dfo_region)

# build map

WSmap <- leaflet() %>% 
  
  # add ocean basemap
  addProviderTiles(providers$Esri.OceanBasemap) %>%
  
  # focus map in a certain area / zoom level
  setView(lng = -63, lat = 44, zoom = 3) %>% 
  
  # add regions
  addPolygons(data = mapregions,
              stroke = T,
              weight = 1,
              color = ~regioncolors(dfo_region),
              fill = T,
              fillColor = ~regioncolors(dfo_region),
              fillOpacity = 0.4,
              smoothFactor = 3) %>%
  
  # add WS points
  addCircleMarkers(data = WS_coords,
                   ~LONGITUDE, ~LATITUDE,
                   weight = 1,
                   col = 'black',
                   fillColor = ~regioncolors_points(REGION_CD),
                   radius = 4,
                   fillOpacity = 1,
                   stroke = T,
                   popup=(paste0(
                     "Row Number: ", WS_coords$ROWNUMBER, "<br>",
                     "Latitude: ", WS_coords$LATITUDE, "<br>",
                     "Longitude: ", WS_coords$LONGITUDE, "<br>",
                     "Region: ", WS_coords$REGION_CD)))

# show map
WSmap


# save map - Joy to add this later if htmlwidgets library is updated??
# 
# if (save_map == TRUE) {
#   saveWidget(widget = map, file = here("output", paste0(outfilename, ".html")), selfcontained = TRUE)
# }
# 
